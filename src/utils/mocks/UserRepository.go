// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	auth "sherman/src/domain/auth"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *UserRepository) CreateUser(user *auth.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*auth.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *UserRepository) GetUserByEmail(email string) (auth.User, error) {
	ret := _m.Called(email)

	var r0 auth.User
	if rf, ok := ret.Get(0).(func(string) auth.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(auth.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id
func (_m *UserRepository) GetUserByID(id string) (auth.User, error) {
	ret := _m.Called(id)

	var r0 auth.User
	if rf, ok := ret.Get(0).(func(string) auth.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(auth.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
