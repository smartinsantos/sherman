// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	auth "sherman/src/domain/auth"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// Security is an autogenerated mock type for the Security type
type Security struct {
	mock.Mock
}

// GenToken provides a mock function with given fields: userID, tokenType, iat, exp
func (_m *Security) GenToken(userID string, tokenType string, iat int64, exp int64) (string, error) {
	ret := _m.Called(userID, tokenType, iat, exp)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, int64, int64) string); ok {
		r0 = rf(userID, tokenType, iat, exp)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int64, int64) error); ok {
		r1 = rf(userID, tokenType, iat, exp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAndValidateAccessToken provides a mock function with given fields: ctx
func (_m *Security) GetAndValidateAccessToken(ctx echo.Context) (auth.TokenMetadata, error) {
	ret := _m.Called(ctx)

	var r0 auth.TokenMetadata
	if rf, ok := ret.Get(0).(func(echo.Context) auth.TokenMetadata); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(auth.TokenMetadata)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAndValidateRefreshToken provides a mock function with given fields: ctx
func (_m *Security) GetAndValidateRefreshToken(ctx echo.Context) (auth.TokenMetadata, error) {
	ret := _m.Called(ctx)

	var r0 auth.TokenMetadata
	if rf, ok := ret.Get(0).(func(echo.Context) auth.TokenMetadata); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(auth.TokenMetadata)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hash provides a mock function with given fields: password
func (_m *Security) Hash(password string) ([]byte, error) {
	ret := _m.Called(password)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyPassword provides a mock function with given fields: hashedPassword, password
func (_m *Security) VerifyPassword(hashedPassword string, password string) error {
	ret := _m.Called(hashedPassword, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(hashedPassword, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
